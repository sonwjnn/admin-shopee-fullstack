<!-- jquery -->
<script src="https://code.jquery.com/jquery-3.6.0.js"></script>
<script src="https://code.jquery.com/ui/1.13.2/jquery-ui.js"></script>

<!--add product form-->
<script>
  $(document).ready(function() {
    $('#formProductsAdd').on('submit', function(e) {
      e.preventDefault()
      const name = $('#name').val()
      const origin = $('#origin').val()
      const price = $('#price').val()
      const productType = $('#productType').val()
      const cateType = $('#cateType').val()
      const producedAt = $('#producedAt').val()
      const discount = $('#discount').val()
      const discountPrice = $('#discountPrice').val()
      const quantity = $('#quantity').val()
      const status = $('#status').val()
      const info = CKEDITOR.instances['productStory'].getData()
      const files = $('#product-images').prop('files')[0] ? $('#product-images').prop('files') : [];


      // Upload image

      const data = {
        name,
        origin,
        price,
        productType,
        cateType,
        status,
        info,
        producedAt,
        discountPrice,
        quantity,
        ...(discount ? {
          discount
        } : {
          discount: 0
        })
      }

      let images = []

      const imagePromise = new Promise((rs, rj) => {
        const formData = new FormData(this)
        $.ajax({
          url: '/admin/upload',
          type: 'POST',
          data: formData,
          processData: false,
          contentType: false,
          success: function(res) {
            images = [...res]
            rs()
          },
          error: function(xhr, status, error) {
            if (xhr.responseJSON && xhr.responseJSON.message) {
              $("#msg").html(xhr.responseJSON.message)
              $("#popupInfo").click()
            }
            rj()
          }
        });
      })

      imagePromise.then(() => {
        $.ajax({
          url: '/admin/products/add',
          type: 'POST',
          data: {
            ...data,
            images
          },
          success: function(res) {
            $('#msg').text(res.message)
            $('#popupInfo').click()
            rs()
          },
          error: function(xhr, status, error) {
            if (xhr.responseJSON && xhr.responseJSON.message) {
              $("#msg").html(xhr.responseJSON.message)
              $("#popupInfo").click()
            }

            // Delete uploaded images
            $.ajax({
              url: '/admin/upload/deleteImages',
              type: 'POST',
              data: {
                publicIds: images.map(image => image.public_id)
              },
              success: function(res) {
                console.log('Images deleted successfully');
              },
              error: function(xhr, status, error) {
                console.log('Failed to delete images');
              }
            });
            rj()
          }
        })
      })
    });
  });
</script>

<!--edit product form-->
<script>
  $(document).ready(function() {
    $('#formProductsEdit').on('submit', function(e) {
      e.preventDefault();
      const name = $('#name').val()
      const origin = $('#origin').val()
      const price = $('#price').val()
      const productType = $('#productType').val()
      const cateType = $('#cateType').val()
      const producedAt = $('#producedAt').val()
      const discountPrice = $('#discountPrice').val()
      const quantity = $('#quantity').val()
      const discount = $('#discount').val()
      const status = $('#status').val()
      const info = CKEDITOR.instances['productInfo'].getData()
      const id = $('#id').val()
      const files = $('#product-images').prop('files')[0] ? $('#product-images').prop('files') : [];

      const data = {
        id,
        name,
        origin,
        price,
        productType,
        cateType,
        status,
        info,
        quantity,
        producedAt,
        discountPrice,
        ...(discount ? {
          discount
        } : {
          discount: 0
        }),
      }

      let images = []

      const imagePromise = new Promise((rs, rj) => {
        const formData = new FormData(this)

        if (files.length) {
          $.ajax({
            url: '/admin/upload',
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(res) {
              images = [...res]
              rs()
            },
            error: function(xhr, status, error) {
              if (xhr.responseJSON && xhr.responseJSON.message) {
                $("#msg").html(xhr.responseJSON.message)
                $("#popupInfo").click()
              }
              rj()
            }
          });
        } else {
          rs();
        }
      })

      imagePromise.then(() => {
        $.ajax({
          url: '/admin/products/update',
          type: 'PUT',
          data: {
            ...data,
            ...(images.length > 0 ? {
              images
            } : {})
          },
          success: function(res) {
            $('#msg').text(res.message)
            $('#popupInfo').click()
            rs()
          },
          error: function(xhr, status, error) {
            if (xhr.responseJSON && xhr.responseJSON.message) {
              $("#msg").html(xhr.responseJSON.message)
              $("#popupInfo").click()
            }

            // Delete uploaded images
            $.ajax({
              url: '/admin/upload/deleteImages',
              type: 'POST',
              data: {
                publicIds: images.map(image => image.public_id)
              },
              success: function(res) {
                console.log('Images deleted successfully');
              },
              error: function(xhr, status, error) {
                console.log('Failed to delete images');
              }
            });
            rj()
          }
        })
      })
    })
  });
</script>


<script>
  $("#firstImage").click(function() {
    $('#imageSecond').val('Fisrt Image');
    $('#imageSecond').addClass('showBorder');
  });
  $("#secondImage").click(function() {
    $('#imageSecond').val('Second Image');
    $('#imageSecond').addClass('showBorder');
  });
  $("#thirdImage").click(function() {
    $('#imageSecond').val('Third Image');
    $('#imageSecond').addClass('showBorder');
  });
  $("#fourthImage").click(function() {
    $('#imageSecond').val('Fourth Image');
    $('#imageSecond').addClass('showBorder');
  });
</script>

<script>
  $("#checkAll").click(function() {
    var index = $('#checkAll').val();

    if (index == '1') {
      $('.imgbgchk').prop('checked', true);
      $('#checkAll').val('2');

    } else {
      $('.imgbgchk').prop('checked', false);
      $('#checkAll').val('1');
    }
  })
</script>

<script>
  $(document).ready(function() {
    let names = [];
    $.ajax({
      url: '/admin/products/list',
      type: 'GET',
      success: function(res) {
        names = res.map((product) => product.name)
      }
    });

    $("#searchName").autocomplete({
      source: names
    });


    $('#searchForm').on('submit', function(e) {
      e.preventDefault();

      const name = $('#searchName').val();

      const link = '/admin/products/search/' + name;
      window.location.href = link;
    })
  })
</script>/
<script src="/formatter.js"></script>
<script src="/formatter.js"></script>
<script>
  function getName(id) {
    $.ajax({
      url: `/admin/products/detail/${id}`,
      type: 'GET',
      success: function(data) {
        const mapping = {
          idUser: 'id',
          name: 'name',
          origin: 'origin',
          discount: 'discount',
          producedAt: 'producedAt',
          productType: 'typeId.name',
          cateType: 'cateId.name',
          info: 'info',
          status: 'status',
          images: 'images'
        };

        for (const key in mapping) {
          const value = mapping[key];
          let fieldValue = data;
          value.split('.').forEach(prop => {
            fieldValue = fieldValue[prop];
          });
          $('#' + key).val(fieldValue);
        }

        $('#discountPrice').val(formatPriceToVND(data.discountPrice));
        $('#price').val(formatPriceToVND(data.price));
        $('#quantity').val(data.quantity)
        $('#sold').val(data.sold)

        const formattedProducedAt = toStringDate.dmy(data.producedAt)
        $('#producedAt').val(formattedProducedAt);


        const imageNameShow = `background-image: url('${data.images[0]?.url}'); aspect-ratio: 1/1;padding-top: 100% ;background-size: contain; background-position: center; background-repeat: no-repeat`;

        $("#imageName").attr('style', imageNameShow);

        var imagePreview = document.getElementById('image-preview-main');
        imagePreview.innerHTML = '';
        for (var i = 1; i < data.images.length; i++) {
          var img = document.createElement('div');
          img.style.backgroundImage = 'url(' + data.images[i].url + ')';
          img.style.height = '100px';
          img.style.width = '100px';
          img.style.backgroundSize = 'contain';
          img.style.backgroundPosition = 'center';
          img.style.backgroundRepeat = 'no-repeat';
          imagePreview.appendChild(img);
        }

        CKEDITOR.instances['info'].setData(data.info);
        $('#exampleModalCenter2').attr('style', 'overflow: auto !important;')
        $('#popupDetail').click();
      }
    });
  }
</script>
<script>
  $('#clickMe').click(function() {
    const text = $('#storyid').text();
    CKEDITOR.instances['productInfo'].setData(text);
  })
  $(document).ready(function() {
    $('#clickMe').click();
  })
</script>


<script>
  function GetIdToDelete(id) {
    $('#idDelete').text(id);
  }

  function deleteProduct() {
    const id = $('#idDelete').text();
    $.ajax({
      url: `/admin/products/${id}`,
      type: 'DELETE',
      success: function(res) {
        location.reload();
      }
    })
  }
</script>


<script>
  $(document).ready(function() {
    var ids = [];

    $('.deleteGr').click(function() {
      var i = 0;
      $('#productTable tr').filter(':has(:checkbox:checked)').each(function() {
        var id = $(this).closest("tr").find("td:nth-child(4)").text();
        id = id.replace(/ /g, '');
        id = id.replace(/(\r\n|\n|\r)/gm, "");
        ids[i] = id;
        i++;
      });

      if (ids.length == 0) {
        $('#popupDeleteGrNoData').click();
      } else {
        $('#popupDeleteGr').click();
      }

    })

    $('#buttonDeleteGr').click(function() {

      $.ajax({
        url: '/admin/products',
        type: 'DELETE',
        contentType: 'application/json',
        data: JSON.stringify({
          ids
        }),
        success: function(res) {
          location.reload();
        },
        error: function(xhr, status, error) {
          console.log('Error' + error)
        }
      })

    })
  })
</script>

<script>
  $("#newFile").click(function() {
    $('#labelNewFile').click();
  });
</script>

<script>
  $('#edit').click(function() {
    var id = $('#idProduct').val();
    var link = '/admin/products/edit/' + id;
    window.location.href = link;
  })
</script>


<script>
  $(document).ready(function() {
    $("#image").change(function() {

      var path = $('#image').val();
      var name = '';
      for (var i = 12; i < path.length; i++) {
        name = name + path[i];
      }
      $('#imageShow').val(name);
    });
  });
</script>


<script>
  /*
    The logic is that when selecting or changing a product type,
    a new category is suggested when adding products
  */
  $(document).ready(async function() {
    const cates = [];
    const types = [];
    const currentSelectedType = $("#productType").val()
    const cateType = document.getElementById('cateType');

    $.ajax({
      url: '/admin/categories/list',
      type: 'GET',
      success: function(res) {
        cates.push(...res);
      },
      error: function(xhr, status, error) {
        console.log('Error' + error)
      }
    })
    $.ajax({
      url: '/admin/product-types/by-name/' + currentSelectedType,
      type: 'GET',
      success: function(res) {
        types.push(...res);
        displayMatchingCategories(currentSelectedType);
      },
      error: function(xhr, status, error) {
        console.log('Error' + error)
      }
    })

    $("#productType").change(function(e) {
      const selectedType = e.target.value;
      cateType.innerHTML = '';

      $.ajax({
        url: '/admin/product-types/by-name/' + selectedType,
        type: 'GET',
        success: function(res) {

          types.length = 0; // Xóa các phần tử trong mảng types
          types.push(...res);
          displayMatchingCategories(selectedType);
          cateType.disabled = false;
        },
        error: function(xhr, status, error) {
          console.log('Error' + error)
        }
      });
    });

    // Hiển thị danh sách các danh mục phù hợp với loại sản phẩm đã chọn
    const displayMatchingCategories = (selectedType) => {

      const matchingCategories = cates.filter(cate => {
        return types.some(type => type.name === selectedType && type.cateId === cate._id);
      });

      matchingCategories.forEach(cate => {
        const option = document.createElement('option');
        option.value = cate.name;
        option.textContent = cate.name;
        cateType.appendChild(option);
      });


    }
  });
</script>

<script>
  $(document).ready(() => {
    document.getElementById('product-images').addEventListener('change', function(e) {
      var imagePreview = document.getElementById('image-preview');
      imagePreview.innerHTML = '';
      for (var i = 0; i < this.files.length; i++) {
        var img = document.createElement('div');
        img.style.backgroundImage = 'url(' + URL.createObjectURL(this.files[i]) + ')';
        img.style.height = '100px';
        img.style.width = '100px';
        img.style.backgroundSize = 'contain';
        img.style.backgroundPosition = 'center';
        img.style.backgroundRepeat = 'no-repeat';
        img.onload = function() {
          URL.revokeObjectURL(this.src);
        }
        imagePreview.appendChild(img);
      }
    });
  })
</script>

<script>
  $(document).ready(() => {
    $('#price').on('input', updateDiscountPrice);
    $('#discount').on('input', updateDiscountPrice);

    function updateDiscountPrice() {
      const priceValue = parseFloat($('#price').val());
      const discountValue = parseFloat($('#discount').val());

      if (priceValue && discountValue) {
        let discountPriceValue = priceValue - (priceValue * discountValue) / 100;
        discountPriceValue = Math.round(discountPriceValue / 1000) * 1000;
        $('#discountPrice').val(discountPriceValue.toFixed(0));
      } else if (!discountValue && priceValue) {
        let priceValueRounded = Math.round(priceValue / 1000) * 1000;
        $('#discountPrice').val(priceValueRounded.toFixed(0));
      } else if (!priceValue) {
        $('#discountPrice').val('');
      }
    }
  })
</script>